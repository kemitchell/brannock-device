#!/usr/bin/env ruby
# frozen_string_literal: true

require 'yaml'
require 'fractional'

# Load Constants

constants = YAML.load_file 'constants.yml'

def constant_to_rational(data)
  returned = 0r

  inches = data['inches']
  returned += Rational(inches) unless inches.nil?

  numerator = data['numerator']
  denominator = data['denominator']
  returned += Rational(numerator, denominator) unless numerator.nil?

  returned
end

foot_length_offset = constant_to_rational(constants['length']['foot']['offset'])
foot_length_gradation = constant_to_rational(constants['length']['foot']['gradation'])

foot_length_allowance = constant_to_rational(constants['length']['allowance'])

arch_length_offset = constant_to_rational(constants['length']['arch']['offset'])
arch_length_gradation = constant_to_rational(constants['length']['arch']['gradation'])

width_names = constants['width']['names']
width_offset = constant_to_rational(constants['width']['offset'])
width_gradation_between = constant_to_rational(constants['width']['gradation']['between sizes'])
width_gradation_within = constant_to_rational(constants['width']['gradation']['within size'])

# Calculate Lengths and Widths

@rows = []
counter = 0.5r

def format_rational(rational, inches = true)
  formatted = Fractional.new(rational).to_s(mixed_fraction: true)
    .sub(' ', ' ')
    .sub('/', '⁄')
  "#{formatted}#{inches ? '″' : ''}"
end

def fractional_in_to_cm(rational)
  "≈#{format('%.1f', (rational * 2.54r).to_f.round(1))} cm"
end

while counter <= 25
  counter += 0.5r

  foot_length = foot_length_offset + (counter * foot_length_gradation)
  arch_length = arch_length_offset + (counter * arch_length_gradation)
  arch_length_decimal = "≈#{format('%.1f', arch_length.round(1))}″"
  last_length = foot_length + foot_length_allowance

  size_width_offset = width_offset + (counter * width_gradation_between)
  size_widths = []
  width_names.each_with_index do |_, i|
    width = size_width_offset + (i * width_gradation_within)
    size_widths << {
      in: format_rational(width),
      cm: fractional_in_to_cm(width)
    }
  end

  @rows << {
    size: format_rational(counter, false),
    foot: format_rational(foot_length),
    foot_cm: fractional_in_to_cm(foot_length),
    last: format_rational(last_length),
    arch: format_rational(arch_length),
    arch_decimal: arch_length_decimal.to_s,
    arch_cm: fractional_in_to_cm(arch_length),
    widths: size_widths
  }
end

# TSV Output

print "Size\tFoot\tFoot\tLast\tArch\tArch\tArch"
width_names.each { |name| print "\t#{name}" * 2 }
print "\n"

@rows.each do |size|
  print [size[:size], size[:foot], size[:foot_cm], size[:last], size[:arch], size[:arch_decimal], size[:arch_cm]].join("\t")
  size[:widths].each do |width|
    print "\t#{width[:in]}\t#{width[:cm]}"
  end
  print "\n"
end
