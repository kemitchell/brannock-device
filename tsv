#!/usr/bin/env ruby
# frozen_string_literal: true

require 'yaml'
require 'fractional'

# Load Constants

constants = YAML.load_file 'constants.yml'

def constant_to_rational(data)
  returned = 0r

  inches = data['inches']
  returned += Rational(inches) unless inches.nil?

  numerator = data['numerator']
  denominator = data['denominator']
  returned += Rational(numerator, denominator) unless numerator.nil?

  returned
end

length_offset = constant_to_rational(constants['length']['offset'])
length_gradation = constant_to_rational(constants['length']['gradation'])
length_allowance = constant_to_rational(constants['length']['allowance'])

width_names = constants['width']['names']
width_offset = constant_to_rational(constants['width']['offset'])
width_gradation_between = constant_to_rational(constants['width']['gradation']['between sizes'])
width_gradation_within = constant_to_rational(constants['width']['gradation']['within size'])

# Calculate Lengths and Widths

rows = []
counter = 0.5r

def format_rational(rational)
  Fractional.new(rational).to_s(mixed_fraction: true)
end

while counter <= 25
  counter += 0.5r

  foot_length = length_offset + (counter * length_gradation)
  last_length = foot_length + length_allowance

  size_width_offset = width_offset + (counter * width_gradation_between)
  size_widths = []
  width_names.each_with_index do |_, i|
    width = size_width_offset + (i * width_gradation_within)
    size_widths << format_rational(width)
  end

  rows << {
    size: format_rational(counter),
    foot: format_rational(foot_length),
    last: format_rational(last_length),
    widths: size_widths
  }
end

# Tests

def assert(got, expected, mesage)
  raise "#{mesage}: got #{got}, expected #{expected}" unless got == expected
end

size2 = rows.find { |size| size[:size] == '2' }
assert(size2[:foot], '8', 'size 2 foot')
assert(size2[:widths].first, '2 1/16', 'size 2 AAA')
assert(size2[:widths].last, '3 3/4', 'size 2 EEEE')

size13 = rows.find { |size| size[:size] == '13' }
assert(size13[:foot], '11 2/3', 'size 13 foot')
assert(size13[:widths].first, '3 7/16', 'size 13 AAA')
assert(size13[:widths].last, '5 1/8', 'size 13 EEEE')

# TSV Output

print "Size\tFoot\tLast"
width_names.each { |name| print "\t#{name}" }
print "\n"

rows.each do |size|
  print "#{size[:size]}\t#{size[:foot]}\t#{size[:last]}"
  size[:widths].each do |width|
    print "\t#{width}"
  end
  print "\n"
end
